Plugins installed :-
====================
meteor add mizzao:bootstrap-3
meteor add underscore
meteor add iron:router
meteor add sacha:spin //Spin package to create loading template
meteor add ian:accounts-ui-bootstrap-3  //Accounts with bootstrap styling
meteor add accounts-password
//The foll package can be used to check if the attributes are of the required type Eg: check(attr ,attrtype)
// i.e check(Meteor.checkId(), String)
//Official desc : Detects inadequate input sanitization
meteor add audit-argument-checks
//The below package can be added to add reactiveness to a variable for e: a variable that gets changed 
//after using a third party API. So to add reactiveness to this varaible add this package
meteor add reactive-var



Plugins removed :-
==================
//Remove autopublish and add publish/subscribe manually
meteor remove autopublish
//Remove insecure package to add data security
meteor remove insecure


Other helpful notes/commands
==============================
*** meteor create :- Creates a barebone project with .meteor and html,css and js files

*** meteor :- run the meteor app

*** meteor reset :- Clear database when its in an inconsistent state

*** meteor mongo :- Mongo shell with the app's current database preloaded into the 'db' variable

*** meteor deploy <appname>.meteor.com :- Deploy the current app at http://<appname>.meteor.

*** meteor create --package dharsh:erros :- Create custom package

*** meteor publish --create :- Publish the created package to atmosphere. You should do this inside the
                               package dir/your package

*** {{> yield}} : Yield a template . This is iron router template helper 

***  Iron router methods :- Router.configure ,Router.route , Router.onBeforeAction, Router.go

*** Router.configure({
	layoutTemplate : 'layout',    //This is the basic layout. This remains the same and route templates replace
	                              //the {{> yield}}
	loadingTemplate : 'loading', //This is the place where you specify the loading template. Iron router
								 //displays this template when you wait on some data
	waitOn : function(){         //Function that specifies the data for which the iron router has to wait for
		return Meteor.subscribe('posts');
	}
	notFoundTemplate : 'notFound' //Route not Found common template
});
The posts data will be fetched once when the user accesses the app for the first time. After that it is available readily

*** Meteor is a reactive , realtime framework. It ensures this by implicitly calling observe() on the cursor of 
collections and taking care of the added , removed and changed methods for the developer. But in some cases
we might have to call the observe explicitly when we deal with third party widgets.

*** Also the whole application is not rerun whenever there is a change . Only the portions of the code that depends on reactive data sources are rerun everytime there is a change. These portions are called computations. Whenever a reactive data source changes, it calls the invalidate() function on the computation 
	Meteor.startup(function() {
		Tracker.autorun(function() {
			console.log('There are ' + Posts.find().count() + ' posts');
		});
	});
Whenever invalidate is called, computation reevaluate their contents.

*** All user related data should be stored inside the Session or inside the url (common data for users).
Whenever session data is changed, you can make is reactive by using Tracker.autorun which runs the reactive code automatically whenever there is a change in the data. Moreover this works like Hot Code Reload so users will never be disrupted as session and data will not be lost. Wrap the code that has to be reactive inside a Tracker.autorun function.This should be wrapped inside a Meteor.startup() function . This makes sure that it only runs once Metor has finished loading the data required. This implicitly creates a computation at the backend 

*** Once the insecure package is removed, You can allow insertions from client side by specifying 
Posts.allow({ 
	insert: function(userId , doc){
		return !! userId
}})
The above code makes sure Post insert is only allowed if there is a valid user logged in

*** To hide / show an element in html depending on if the user is not logged in or not , you can use the currentuser
spacebar provided by accounts package . This is equivalent to Metoer.user() check from server side
    Eg : {{#if currentUser}} 
    		<<<<<Here is the html element that you have to hide if user is not logged in >>>>>
    	 {{/if}}

*** Meteor.methods() are the server side methods that can be called from the client side by
calling Meteor.call (methodName , arguments , callbackFunction)
The collection-hooks package can be used to create hooks for before , after insert or db operations in the Meteor.methods call. i.e Posts.insert can be used with Posts.before.insert when used with collection-hooks package .

*** How does the Meteor.methods() in server and Meteor.call() in client work.
Typically if it works in the normal client-server way , this is how it would look
                                    =================
click --> client (Method.call()) --> server(Method.method exec) --> Returns results to client and GUI updates
  0ms -->         0ms            -->         +200 ms             -->             +500 ms
  --------------Normal call w/o Meteor's Latency Compensation------------------------->

  Meteor Way
  ===========
  click --> client(Method.call()) --> client simuates action of Method call and updates GUI --> 
    0ms -->       0ms             -->     0ms (At this point UI reflects simulated changes) -->
  server(Method.method exec) --> Returns results to client.Client replaces simulated results with server results
    200ms                    -->                           500ms (Replaced with real changes)
---------------------Latency Compensation way ------------------------------------------------->

This latency compensation can be observed by calling the Meteor._sleepForMs() method in the server side and then
executing the . Since the posts.js is in collections both server and client execute them. So we add the delay in the client side by checking for Meteor.isServer . The method stimulation run by the client is called stub()
 
 *** Allow /Deny and Meteor.methods - Allow / Deny can be used in case very simple manipulation is ony needed
 on the collection. For any other server related information to be inserted /updated in the collection , use meteor.methods
 There can be ultiple allow/deny for a single operation. Order of access checks :- First all deny checks are done and even if one of them is true ,operation is denied. If all of them are false , then allow methods are checked and even if one of them is true , then operation is allowed.

*** Errors should not be dealt only with alerts. And since they are only valid for the current session ,
they can be stored in "Local Collections" What this means is that this collection will only be present in the client side and will not be synced with the server.  You can create a local client-only collection by creating a collection within the client directory. Eg: Inside client helpers you can create a collection as follows :
Error = new Mongo.Collection(null);  

*** Denormalizing the data is far better than loading all data just because we need to show it to the user. For example , Comments for a post need not be loaded all the time(i.e need not be subscibed by the router) Only when the post Detail page is shown , you have to load the comments data. (i.e only the specfic route should subscribe for that data ) But what this would mean is that , the data related to the number of comments on a post and other such details would not be available for other routes such as list post page etc. So solution for this is to make the data denormalized . In this case , the data related to commentsCount can be added as a column to the posts page . This extra code complexity would be nothing compared to the huge performance benefit that we get because of loading comments data only when it is needed.

*** Creating a Reactive variable
Add this package reactive-var . So for eg :
 var currentCount = new ReactiveVar(); 
 And then you can set the value of this variable as this : currentCount.set(someValue) . This internally finds all the dependency() code and executes the <listeners>.changed(() method . They then invalidate the computation and then either rerun or do whatever they are supposed to do .

*** Routes are parsed successively in the order in which they are written in the code. So it is better to use specific paths first (eg : /post/:id) and add vague routes towards the bottom (/:postsLimit? . This is vague because :postsLimit? can match any parameter. So this should be put below all the other routes)  The posts can be filtered and published in this manner 
	Meteor.publish('posts',function(options){
		return Posts.find({},options);
	});

*** To make sure that we reuse code among routes , we can add a RouteController
PostsListController = RouteController.extend({
	template : <<templateName>>,
	.............
})

*** {{#unless <something>}} do something .. {{unless}} .. This is something like a while loop which
loops until the <something> condition to be true.

*** Multiple publications can be made for a single collection :D
